import{B as m,C as u,E as p,Q as y,R as F,S as n,U as i}from"./index-CanbGPVk.js";class w{constructor(){this.programsCache=null,this.faqsCache=null,this.cacheExpiry=300*1e3,this.programsCacheTime=null,this.faqsCacheTime=null}isCacheValid(o){return o&&Date.now()-o<this.cacheExpiry}async getPrograms(){try{if(this.programsCache&&this.isCacheValid(this.programsCacheTime))return this.programsCache;console.log("Fetching programs from Firestore...");const o=m(u,"programs"),a=await p(o),e=[];return a.forEach(t=>{e.push({id:t.id,...t.data()})}),this.programsCache=e,this.programsCacheTime=Date.now(),console.log(`Loaded ${e.length} programs from Firestore`),e}catch(o){throw console.error("Error fetching programs from Firestore:",o),new Error("Failed to load programs. Please try again later.")}}async getProgram(o){try{if(this.programsCache&&this.isCacheValid(this.programsCacheTime)){const t=this.programsCache.find(r=>r.id===o);if(t)return t}console.log(`Fetching program ${o} from Firestore...`);const a=y(u,"programs",o),e=await F(a);return e.exists()?{id:e.id,...e.data()}:null}catch(a){throw console.error("Error fetching program from Firestore:",a),new Error("Failed to load program details. Please try again later.")}}async getFaqs(){try{if(this.faqsCache&&this.isCacheValid(this.faqsCacheTime))return this.faqsCache;console.log("Fetching FAQs from Firestore...");const o=m(u,"faqs"),a=await p(o),e=[];return a.forEach(t=>{e.push({id:t.id,...t.data()})}),this.faqsCache=e,this.faqsCacheTime=Date.now(),console.log(`Loaded ${e.length} FAQs from Firestore`),e}catch(o){throw console.error("Error fetching FAQs from Firestore:",o),new Error("Failed to load FAQs. Please try again later.")}}async getSportOptions(){try{const o=await this.getPrograms();return[...new Set(o.map(e=>e.sport))].filter(Boolean).sort()}catch(o){return console.error("Error getting sport options:",o),[]}}async getAgeGroupOptions(){try{const o=await this.getPrograms(),a=new Set;return o.forEach(e=>{e.ageGroups&&Array.isArray(e.ageGroups)&&e.ageGroups.forEach(t=>a.add(t))}),[...a].sort()}catch(o){return console.error("Error getting age group options:",o),[]}}async getAccessibilityOptions(){try{const o=await this.getPrograms(),a=new Set;o.forEach(t=>{t.accessibility&&Array.isArray(t.accessibility)&&t.accessibility.forEach(r=>a.add(r))});const e={"wheelchair-access":"Wheelchair accessible","accessible-toilets":"Accessible toilets","pool-lift":"Pool lift","family-change-rooms":"Family change rooms","quiet-area":"Quiet area","pet-friendly":"Pet friendly","pram-access":"Pram accessible","baby-change":"Baby change facilities","seating-available":"Seating available"};return[...a].map(t=>({value:t,label:e[t]||t})).sort((t,r)=>t.label.localeCompare(r.label))}catch(o){return console.error("Error getting accessibility options:",o),[]}}async searchPrograms(o={}){try{let e=[...await this.getPrograms()];if(o.query&&o.query.trim()){const r=o.query.toLowerCase().trim().split(/\s+/).filter(s=>s.length>0);e=e.filter(s=>{const c=[s.title,s.sport,s.description,s.venue?.name,s.venue?.suburb,s.venue?.address,...s.inclusivityTags||[],...s.accessibility||[],...s.ageGroups||[],s.cost===0?"free":"",s.costUnit||""].filter(Boolean),f=c.join(" ").toLowerCase();return r.every(l=>f.includes(l)?!0:c.some(h=>{const g=String(h).toLowerCase();return new RegExp(`\\b${this.escapeRegExp(l)}`,"i").test(g)?!0:l.length>=3?g.split(/\s+/).some(d=>d.startsWith(l)||d.includes(l)):!1}))})}if(o.sport&&(e=e.filter(t=>t.sport===o.sport)),o.ageGroup&&(e=e.filter(t=>t.ageGroups&&t.ageGroups.includes(o.ageGroup))),o.maxCost!==void 0&&o.maxCost!==null&&String(o.maxCost).trim()!==""){const t=parseFloat(String(o.maxCost).trim());!isNaN(t)&&t>=0&&(e=e.filter(r=>r.cost<=t))}return o.accessibility&&o.accessibility.length>0&&(e=e.filter(t=>{const r=t.accessibility||[];return o.accessibility.some(s=>r.includes(s))})),e.sort((t,r)=>t.cost===0&&r.cost>0?-1:t.cost>0&&r.cost===0?1:t.cost-r.cost)}catch(a){throw console.error("Error searching programs:",a),new Error("Failed to search programs. Please try again later.")}}escapeRegExp(o){return o.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}clearCache(){this.programsCache=null,this.faqsCache=null,this.programsCacheTime=null,this.faqsCacheTime=null,console.log("Data cache cleared")}async createProgram(o){try{console.log("Creating program via Cloud Function...",o);const e=await n(i,"createProgram")(o);return console.log("Program created successfully:",e.data),this.clearCache(),e.data}catch(a){console.error("Error creating program:",a);let e="Failed to create program. Please try again.";throw a.code==="functions/invalid-argument"?e=a.message||"Invalid program data provided.":a.code==="functions/permission-denied"?e="You do not have permission to create programs.":a.code==="functions/unauthenticated"?e="Please log in to create a program.":a.message&&(e=a.message),new Error(e)}}async createAppointment(o){try{console.log("Creating appointment via Cloud Function...",o);const e=await n(i,"createAppointment")(o);return console.log("Appointment created successfully:",e.data),e.data}catch(a){console.error("Error creating appointment:",a);let e="Failed to book appointment. Please try again.";throw a.code==="functions/invalid-argument"?e=a.message||"Invalid appointment data provided.":a.code==="functions/permission-denied"?e="You do not have permission to book appointments.":a.code==="functions/unauthenticated"?e="Please log in to book an appointment.":a.message&&(e=a.message),new Error(e)}}async getUserAppointments(o){try{console.log("Getting user appointments via Cloud Function...",o);const e=await n(i,"getUserAppointments")({user_email:o});return console.log("User appointments retrieved successfully:",e.data),e.data}catch(a){console.error("Error getting user appointments:",a);let e="Failed to load appointments. Please try again.";throw a.code==="functions/invalid-argument"?e=a.message||"Invalid request data.":a.code==="functions/permission-denied"?e="You do not have permission to view appointments.":a.code==="functions/unauthenticated"?e="Please log in to view your appointments.":a.message&&(e=a.message),new Error(e)}}async updateAppointment(o,a,e){try{console.log("Updating appointment via Cloud Function...",{appointmentId:o,timeSlots:a,userEmail:e});const r=await n(i,"updateAppointment")({appointment_id:o,time_slot:a,user_email:e});return console.log("Appointment updated successfully:",r.data),r.data}catch(t){console.error("Error updating appointment:",t);let r="Failed to update appointment. Please try again.";throw t.code==="functions/invalid-argument"?r=t.message||"Invalid appointment data provided.":t.code==="functions/permission-denied"?r="You do not have permission to update this appointment.":t.code==="functions/unauthenticated"?r="Please log in to update appointments.":t.message&&(r=t.message),new Error(r)}}async cancelAppointment(o,a){try{console.log("Canceling appointment via Cloud Function...",o,a);const t=await n(i,"cancelAppointment")({appointmentId:o,userEmail:a});return console.log("Appointment cancelled successfully:",t.data),t.data}catch(e){console.error("Error canceling appointment:",e);let t="Failed to cancel appointment. Please try again.";throw e.code==="functions/invalid-argument"?t=e.message||"Invalid appointment data provided.":e.code==="functions/permission-denied"?t="You do not have permission to cancel this appointment.":e.code==="functions/unauthenticated"?t="Please log in to cancel appointments.":e.message&&(t=e.message),new Error(t)}}async updateProgram(o,a){try{console.log("Updating program via Cloud Function...",o);const t=await n(i,"updateProgram")({programId:o,programData:a});return console.log("Program updated successfully:",t.data),this.programsCache=null,this.programsCacheTime=0,t.data}catch(e){console.error("Error updating program:",e);let t="Failed to update program. Please try again.";throw e.code==="functions/invalid-argument"?t=e.message||"Invalid program data provided.":e.code==="functions/permission-denied"?t="You do not have permission to update this program.":e.code==="functions/unauthenticated"?t="Please log in to update programs.":e.message&&(t=e.message),new Error(t)}}async cancelProgram(o,a){try{console.log("Canceling program via Cloud Function...",o,a);const t=await n(i,"cancelProgram")({programId:o,userEmail:a});return console.log("Program cancelled successfully:",t.data),this.programsCache=null,this.programsCacheTime=0,t.data}catch(e){console.error("Error canceling program:",e);let t="Failed to cancel program. Please try again.";throw e.code==="functions/invalid-argument"?t=e.message||"Invalid program data provided.":e.code==="functions/permission-denied"?t="You do not have permission to cancel this program.":e.code==="functions/unauthenticated"?t="Please log in to cancel programs.":e.message&&(t=e.message),new Error(t)}}async getUserNotifications(o,a=1,e=20){try{console.log("Getting user notifications via Cloud Function...",o,a,e);const r=await n(i,"getUserNotifications")({userEmail:o,page:a,limit:e});return console.log("User notifications retrieved successfully:",r.data),r.data}catch(t){console.error("Error getting user notifications:",t);let r="Failed to get notifications. Please try again.";throw t.code==="functions/invalid-argument"?r=t.message||"Invalid request data.":t.code==="functions/unauthenticated"?r="Please log in to view notifications.":t.message&&(r=t.message),new Error(r)}}async markNotificationAsRead(o,a){try{console.log("Marking notification as read via Cloud Function...",o,a);const t=await n(i,"markNotificationAsRead")({notificationId:o,userEmail:a});return console.log("Notification marked as read successfully:",t.data),t.data}catch(e){console.error("Error marking notification as read:",e);let t="Failed to mark notification as read. Please try again.";throw e.code==="functions/invalid-argument"?t=e.message||"Invalid notification data.":e.code==="functions/permission-denied"?t="You do not have permission to mark this notification as read.":e.code==="functions/unauthenticated"?t="Please log in to manage notifications.":e.message&&(t=e.message),new Error(t)}}async markAllNotificationsAsRead(o){try{console.log("Marking all notifications as read via Cloud Function...",o);const e=await n(i,"markAllNotificationsAsRead")({userEmail:o});return console.log("All notifications marked as read successfully:",e.data),e.data}catch(a){console.error("Error marking all notifications as read:",a);let e="Failed to mark all notifications as read. Please try again.";throw a.code==="functions/invalid-argument"?e=a.message||"Invalid request data.":a.code==="functions/unauthenticated"?e="Please log in to manage notifications.":a.message&&(e=a.message),new Error(e)}}async deleteNotification(o,a){try{console.log("Deleting notification via Cloud Function...",o,a);const t=await n(i,"deleteNotification")({notificationId:o,userEmail:a});return console.log("Notification deleted successfully:",t.data),t.data}catch(e){console.error("Error deleting notification:",e);let t="Failed to delete notification. Please try again.";throw e.code==="functions/invalid-argument"?t=e.message||"Invalid notification data.":e.code==="functions/permission-denied"?t="You do not have permission to delete this notification.":e.code==="functions/unauthenticated"?t="Please log in to manage notifications.":e.message&&(t=e.message),new Error(t)}}async uploadImageToS3(o,a=null){try{console.log("Uploading image to S3...",o.name,a);const t=await n(i,"generateImageUploadUrl")({fileName:o.name,fileType:o.type,programId:a});if(!t.data.success)throw new Error("Failed to generate upload URL");const{uploadUrl:r,publicUrl:s}=t.data;console.log("Got presigned URL, uploading to S3...");const c=await fetch(r,{method:"PUT",body:o,headers:{"Content-Type":o.type}});if(!c.ok)throw new Error(`S3 upload failed with status ${c.status}`);return console.log("Image uploaded successfully to S3:",s),{success:!0,url:s,key:t.data.key,fileName:o.name}}catch(e){console.error("Error uploading image to S3:",e);let t="Failed to upload image. Please try again.";throw e.code==="functions/invalid-argument"?t=e.message||"Invalid file data.":e.code==="functions/unauthenticated"?t="Please log in to upload images.":e.message&&(t=e.message),new Error(t)}}async getFeaturedPrograms(o=6){try{const e=(await this.getPrograms()).map(t=>{let r=0;return t.inclusivityTags?.includes("beginner-friendly")&&(r+=2),t.cost===0&&(r+=2),t.cost>0&&t.cost<=5&&(r+=1),{...t,_score:r}});return e.sort((t,r)=>r._score-t._score||t.cost-r.cost),e.slice(0,o)}catch(a){return console.error("Error getting featured programs:",a),[]}}}const E=new w;export{E as d};
